package com.org.dao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import com.org.domain.Employee;
@Repository
public class UserDao {
	@Autowired
	private JdbcTemplate jdbcTemplate;
	
	 
	 public void saveEmployee(Employee emp) {
	        String sql = "INSERT INTO your_table_name (name, address) VALUES (?, ?)";
	        jdbcTemplate.update(sql, emp.getName(), emp.getAddress());
	    }

	    public Employee getEmployeeById(int id) {
	        String sql = "SELECT * FROM your_table_name WHERE id = ?";
	        return jdbcTemplate.queryForObject(sql, new Object[]{id}, new EmployeeRowMapper());
	    }
	}
	In this example, EmployeeRowMapper is assumed to be a separate class that implements the RowMapper interface to map the result set to the Employee object. Here's an example implementation of the EmployeeRowMapper:

	java
	Copy code
	import org.springframework.jdbc.core.RowMapper;

	import java.sql.ResultSet;
	import java.sql.SQLException;

	public class EmployeeRowMapper implements RowMapper<Employee> {
	    @Override
	    public Employee mapRow(ResultSet rs, int rowNum) throws SQLException {
	        Employee employee = new Employee();
	        employee.setId(rs.getInt("id"));
	        employee.setName(rs.getString("name"));
	        employee.setAddress(rs.getString("address"));
	        return employee;
	    }
}


